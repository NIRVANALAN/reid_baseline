This is not an error. If you want to use low precision, i.e., fp16, please install the apex with cuda support (https://github.com/NVIDIA/apex) and update pytorch to 1.0
[Resize(size=(256, 128), interpolation=PIL.Image.BICUBIC), Pad(padding=10, fill=0, padding_mode=constant), RandomCrop(size=(256, 128), padding=0), RandomHorizontalFlip(p=0.5), ToTensor(), Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]), <random_erasing.RandomErasing object at 0x7f17a46a7e10>]
1.6689300537109375e-06
ft_net(
  (model): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Linear(in_features=2048, out_features=1000, bias=True)
  )
  (class_0): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_1): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_2): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_3): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_4): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_5): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_6): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_7): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_8): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_9): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_10): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_11): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_12): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_13): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_14): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_15): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_16): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_17): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_18): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_19): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_20): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_21): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_22): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_23): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_24): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_25): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_26): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_27): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_28): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_29): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_30): ClassBlock(
    (dropout): Dropout(p=0.5)
    (add_block): Sequential(
      (0): Linear(in_features=2048, out_features=256, bias=True)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (classifier): Sequential(
      (0): Linear(in_features=256, out_features=751, bias=True)
    )
  )
)
Epoch 0/59
----------
train Loss: 3.9537 Acc: 0.3001
val Loss: 8.8009 Acc: 0.0018
Training complete in 5m 60s

Epoch 1/59
----------
train Loss: 1.1403 Acc: 0.7629
val Loss: 10.3691 Acc: 0.0018
Training complete in 11m 58s

Epoch 2/59
----------
train Loss: 0.4756 Acc: 0.8971
val Loss: 11.4375 Acc: 0.0018
Training complete in 17m 57s

Epoch 3/59
----------
train Loss: 0.2701 Acc: 0.9409
val Loss: 12.1273 Acc: 0.0015
Training complete in 24m 31s

Epoch 4/59
----------
train Loss: 0.1842 Acc: 0.9600
val Loss: 12.9986 Acc: 0.0033
Training complete in 30m 44s

Epoch 5/59
----------
train Loss: 0.1193 Acc: 0.9760
val Loss: 12.7711 Acc: 0.0018
Training complete in 37m 25s

Epoch 6/59
----------
train Loss: 0.0766 Acc: 0.9855
val Loss: 13.0661 Acc: 0.0024
Training complete in 43m 22s

Epoch 7/59
----------
train Loss: 0.0516 Acc: 0.9913
val Loss: 13.4037 Acc: 0.0036
Training complete in 49m 21s

Epoch 8/59
----------
train Loss: 0.0408 Acc: 0.9930
val Loss: 13.7122 Acc: 0.0030
Training complete in 55m 19s

Epoch 9/59
----------
train Loss: 0.0310 Acc: 0.9950
val Loss: 13.3125 Acc: 0.0024
Training complete in 61m 52s

Epoch 10/59
----------
train Loss: 0.0258 Acc: 0.9955
val Loss: 13.7300 Acc: 0.0021
Training complete in 67m 51s

Epoch 11/59
----------
train Loss: 0.0144 Acc: 0.9979
val Loss: 13.6910 Acc: 0.0027
Training complete in 73m 50s

Epoch 12/59
----------
train Loss: 0.0126 Acc: 0.9983
val Loss: 13.6482 Acc: 0.0021
Training complete in 80m 22s

Epoch 13/59
----------
train Loss: 0.0097 Acc: 0.9990
val Loss: 13.4726 Acc: 0.0021
Training complete in 88m 1s

Epoch 14/59
----------
train Loss: 0.0071 Acc: 0.9989
val Loss: 13.6455 Acc: 0.0021
Training complete in 94m 5s

Epoch 15/59
----------
train Loss: 0.0057 Acc: 0.9993
val Loss: 13.7331 Acc: 0.0024
Training complete in 100m 4s

Epoch 16/59
----------
train Loss: 0.0060 Acc: 0.9991
val Loss: 13.3602 Acc: 0.0033
Training complete in 106m 6s

Epoch 17/59
----------
train Loss: 0.0049 Acc: 0.9994
val Loss: 13.4238 Acc: 0.0021
Training complete in 112m 8s

Epoch 18/59
----------
train Loss: 0.0046 Acc: 0.9994
val Loss: 13.3240 Acc: 0.0027
Training complete in 118m 9s

Epoch 19/59
----------
train Loss: 0.0043 Acc: 0.9994
val Loss: 13.2878 Acc: 0.0024
Training complete in 124m 13s

Epoch 20/59
----------
train Loss: 0.0040 Acc: 0.9994
val Loss: 13.1907 Acc: 0.0027
Training complete in 130m 14s

Epoch 21/59
----------
train Loss: 0.0039 Acc: 0.9994
val Loss: 13.1813 Acc: 0.0030
Training complete in 136m 15s

Epoch 22/59
----------
train Loss: 0.0037 Acc: 0.9994
val Loss: 13.1451 Acc: 0.0027
Training complete in 142m 24s

Epoch 23/59
----------
train Loss: 0.0036 Acc: 0.9994
val Loss: 13.0615 Acc: 0.0024
Training complete in 148m 26s

Epoch 24/59
----------
train Loss: 0.0037 Acc: 0.9994
val Loss: 12.9815 Acc: 0.0024
Training complete in 154m 27s

Epoch 25/59
----------
train Loss: 0.0036 Acc: 0.9994
val Loss: 12.8969 Acc: 0.0030
Training complete in 160m 34s

Epoch 26/59
----------
train Loss: 0.0035 Acc: 0.9994
val Loss: 12.8150 Acc: 0.0027
Training complete in 166m 36s

Epoch 27/59
----------
train Loss: 0.0035 Acc: 0.9994
val Loss: 12.7608 Acc: 0.0024
Training complete in 172m 45s

Epoch 28/59
----------
train Loss: 0.0035 Acc: 0.9994
val Loss: 12.7568 Acc: 0.0024
Training complete in 178m 51s

Epoch 29/59
----------
train Loss: 0.0038 Acc: 0.9994
val Loss: 12.6575 Acc: 0.0033
Training complete in 184m 56s

Epoch 30/59
----------
train Loss: 0.0035 Acc: 0.9994
val Loss: 12.4939 Acc: 0.0027
Training complete in 190m 57s

Epoch 31/59
----------
This is not an error. If you want to use low precision, i.e., fp16, please install the apex with cuda support (https://github.com/NVIDIA/apex) and update pytorch to 1.0
-------test-----------
torch.Size([3368, 256])
Rank@1:0.867280 Rank@5:0.957245 Rank@10:0.973278 mAP:0.685173
