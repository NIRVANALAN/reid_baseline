This is not an error. If you want to use low precision, i.e., fp16, please install the apex with cuda support (https://github.com/NVIDIA/apex) and update pytorch to 1.0
[Resize(size=(256, 128), interpolation=PIL.Image.BICUBIC), Pad(padding=10, fill=0, padding_mode=constant), RandomCrop(size=(256, 128), padding=0), RandomHorizontalFlip(p=0.5), ToTensor(), Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]), <random_erasing.RandomErasing object at 0x7f453879a4e0>]
1.6689300537109375e-06
ft_net(
  (model): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Linear(in_features=2048, out_features=1000, bias=True)
  )
  (class_0): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_1): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_2): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_3): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_4): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_5): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_6): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_7): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_8): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_9): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_10): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_11): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_12): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_13): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_14): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_15): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_16): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_17): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_18): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_19): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_20): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_21): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_22): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_23): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_24): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_25): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_26): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_27): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_28): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_29): Sequential(
    (0): weighted_avg_pooling(
      (part_detector_block): Sequential(
        (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
        (1): Sigmoid()
      )
    )
    (1): ClassBlock(
      (dropout): Dropout(p=0.5)
      (add_block): Sequential(
        (0): Linear(in_features=2048, out_features=128, bias=True)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (classifier): Sequential(
        (0): Linear(in_features=128, out_features=2, bias=True)
      )
    )
  )
  (class_30): ClassBlock(
    (dropout): Dropout(p=0.5)
    (add_block): Sequential(
      (0): Linear(in_features=2048, out_features=256, bias=True)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (classifier): Sequential(
      (0): Linear(in_features=256, out_features=751, bias=True)
    )
  )
)
Epoch 0/59
----------
train Loss: 3.7007 Acc: 0.3632
val Loss: 9.0409 Acc: 0.0012
Training complete in 5m 30s

Epoch 1/59
----------
train Loss: 0.7444 Acc: 0.8654
val Loss: 10.5420 Acc: 0.0030
Training complete in 10m 58s

Epoch 2/59
----------
train Loss: 0.1909 Acc: 0.9710
val Loss: 11.0108 Acc: 0.0015
Training complete in 16m 26s

Epoch 3/59
----------
train Loss: 0.0651 Acc: 0.9915
val Loss: 10.9330 Acc: 0.0015
Training complete in 21m 54s

Epoch 4/59
----------
train Loss: 0.0275 Acc: 0.9971
val Loss: 11.3037 Acc: 0.0018
Training complete in 27m 23s

Epoch 5/59
----------
train Loss: 0.0157 Acc: 0.9989
val Loss: 11.3328 Acc: 0.0024
Training complete in 32m 50s

Epoch 6/59
----------
train Loss: 0.0124 Acc: 0.9987
val Loss: 11.3344 Acc: 0.0033
Training complete in 38m 19s

Epoch 7/59
----------
train Loss: 0.0080 Acc: 0.9992
val Loss: 11.3290 Acc: 0.0027
Training complete in 43m 47s

Epoch 8/59
----------
